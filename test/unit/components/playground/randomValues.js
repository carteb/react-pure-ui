/* eslint no-unused-expressions: 0 */

import React from 'react';
import { expect } from 'chai';
import { fromJS } from 'immutable';
import { stub } from 'sinon';
import randomValues from '../../../../src/components/playground/randomValues';

describe('randomValues', () => {
  let TestControl;
  let randomValueStub;

  beforeEach(() => {
    TestControl = () => {
      return (<div>Test control</div>);
    };

    TestControl.randomValue = () => 0;
    randomValueStub = stub(TestControl, 'randomValue').returns(42);
  });

  it('should return a Map with the properties and their values generated by the random function of a control', () => {
    const properties = {
      age: <TestControl />,
    };
    const result = randomValues(fromJS(properties)).toJS();
    expect(result).to.eql({ age: 42 });
    expect(randomValueStub).to.have.been.calledOnce;
  });

  it('should return a nested Map for nested properties', () => {
    const fields = {
      foo: {
        bar: {
          mo: <TestControl />,
        },
        mu: <TestControl />,
      },
    };
    const result = randomValues(fromJS(fields)).toJS();
    const expected = {
      foo: {
        bar: {
          mo: 42,
        },
        mu: 42,
      },
    };
    expect(result).to.eql(expected);
    expect(randomValueStub).to.have.been.calledTwice;
  });

  it('should return the value in case it is provided for the control', () => {
    const properties = {
      age: <TestControl value={22} />,
    };
    const result = randomValues(fromJS(properties)).toJS();
    expect(result).to.eql({ age: 22 });
  });
});
